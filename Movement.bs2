' {$STAMP BS2}
' {$PBASIC 2.5}

' ##### Declare the Command Constants #####

' ~ Speech Commands
CMD_Mouth_Pin2_ON     CON   21
CMD_Mouth_Pin2_OFF    CON   20
CMD_Mouth_Pin1_ON     CON   11
CMD_Mouth_Pin1_OFF    CON   10
CMD_Mouth_Pin4_ON     CON   41
CMD_Mouth_Pin4_OFF    CON   40
CMD_Mouth_Pin5_ON     CON   51
CMD_Mouth_Pin5_OFF    CON   50

CMD_Mouth_Pos_OP1     CON   91
CMD_Mouth_Pos_OP2     CON   92
CMD_Mouth_Pos_OP3     CON   93
CMD_Mouth_Pos_OP4     CON   94
CMD_Mouth_Pos_NAR     CON   95
CMD_Mouth_Pos_MED     CON   96
CMD_Mouth_Pos_CLO     CON   90

' ~ Movement Commands
CMD_Move_Forward      CON  111
CMD_Move_Backward     CON  100
CMD_Move_Rotate_Left  CON  101
CMD_Move_Rotate_Right CON  110
CMD_Move_Faster       CON  121
CMD_Move_Slower       CON  122
CMD_Move_STOP         CON  199

' ##### Initialize Runtime #####
BAUD                  CON   84
COMDATA               VAR   Word
p                     VAR   Word

' ##### Initialize Speech #####
HIGH 2: PAUSE 100
HIGH 1: PAUSE 100  ' Light them all up in sequence
HIGH 4: PAUSE 100  ' to verify connections and then
HIGH 5: PAUSE 400  ' switch them all off!

LOW 2: LOW 1: LOW 4: LOW 5

' ##### Initialize Motor Controller #####
PIN_MC_Forward        PIN 12
PIN_MC_Turn           PIN 13
CMD_MC_Turn           VAR Bit    ' 0 or 1  = Turn
CMD_MC_Reverse        VAR Word   ' 1 or -1 = Reverse
CMD_MC_Speed          VAR Word
POS_MC_Throttle       VAR Word   ' Throttle Position 1 to 5
FAC_MC_Throttle       CON 15     ' The factor multiplied by the Throttle equals the Speed

' ##### Loop to get the Commands #####
DO

  'SERIN 16, BAUD, 500, PanTiltOutput, [DEC COMDATA]

  DEBUG "Enter a Command: "        ' prompt user
  DEBUGIN DEC COMDATA              ' retrieve number in any format

  IF COMDATA < 100 THEN

  ' !-- Execute a Speech Command
    SELECT COMDATA
      CASE CMD_Mouth_Pin2_ON:  HIGH 2
      CASE CMD_Mouth_Pin2_OFF: LOW  2
      CASE CMD_Mouth_Pin1_ON:  HIGH 1
      CASE CMD_Mouth_Pin1_OFF: LOW  1
      CASE CMD_Mouth_Pin4_ON:  HIGH 4
      CASE CMD_Mouth_Pin4_OFF: LOW  4
      CASE CMD_Mouth_Pin5_ON:  HIGH 5
      CASE CMD_Mouth_Pin5_OFF: LOW  5
      CASE CMD_Mouth_Pos_OP1:  HIGH 2: LOW  1: LOW  4: LOW  5
      CASE CMD_Mouth_Pos_OP2:  HIGH 2: HIGH 1: LOW  4: LOW  5
      CASE CMD_Mouth_Pos_OP3:  HIGH 2: HIGH 1: LOW  4: HIGH 5
      CASE CMD_Mouth_Pos_OP4:  HIGH 2: HIGH 1: HIGH 4: LOW  5
      CASE CMD_Mouth_Pos_NAR:  HIGH 2: LOW  1: LOW  4: HIGH 5
      CASE CMD_Mouth_Pos_MED:  HIGH 2: HIGH 1: HIGH 4: HIGH 5
      CASE CMD_Mouth_Pos_CLO:  LOW  2: LOW  1: LOW  4: LOW  5
    ENDSELECT

  ELSEIF COMDATA < 1000 THEN

  ' !-- Execute a Movement Command
    DEBUG "Execute a Movement Command"

    SELECT COMDATA

      CASE CMD_Move_Forward
        DEBUG "Command = Move Forward", CR
        POS_MC_Throttle = 1
        CMD_MC_Turn     = 0
        CMD_MC_Reverse  = 1

      CASE CMD_Move_Backward
        DEBUG "Command = Move Backward", CR
        POS_MC_Throttle = 1
        CMD_MC_Turn     = 0
        CMD_MC_Reverse  = -1

      CASE CMD_Move_Rotate_Left
        DEBUG "Command = Rotate Left", CR
        POS_MC_Throttle = 1
        CMD_MC_Turn     = 1
        CMD_MC_Reverse  = 1

      CASE CMD_Move_Rotate_Right
        DEBUG "Command = Rotate Right", CR
        POS_MC_Throttle = 1
        CMD_MC_Turn     = 1
        CMD_MC_Reverse  = -1

      CASE CMD_Move_Faster
        DEBUG "Command = Move Faster", CR
        IF POS_MC_Throttle < 5 THEN POS_MC_Throttle = POS_MC_Throttle + 1

      CASE CMD_Move_Slower
        DEBUG "Command = Move Slower", CR
        IF POS_MC_Throttle > 1 THEN POS_MC_Throttle = POS_MC_Throttle - 1

      CASE CMD_Move_STOP
        DEBUG "Command = Stop", CR
        CMD_MC_Turn     = 0
        CMD_MC_Speed    = 750

    ENDSELECT

    ' Send the Command TO the Motor Controller ----
    CMD_MC_Speed = 750 + (POS_MC_Throttle * FAC_MC_Throttle * CMD_MC_Reverse)

    ' DOT NET will send the command at a preset interval thus sending
    ' the Pulsout from the Stamp at this interval is not required.

    IF NOT CMD_MC_Turn  = 1 THEN

      DEBUG SDEC ? CMD_MC_Speed, CR

      FOR p = 1 TO 100
        PULSOUT PIN_MC_Forward, CMD_MC_Speed
        PAUSE 20
      NEXT
    ELSE

      DEBUG SDEC ? CMD_MC_Speed, CR

      FOR p = 1 TO 100
        PULSOUT PIN_MC_Turn, CMD_MC_Speed
        PAUSE 20
      NEXT
    ENDIF
  ENDIF

PanTiltOutput:

  ' Reset the Command Data
  COMDATA = 0

LOOP